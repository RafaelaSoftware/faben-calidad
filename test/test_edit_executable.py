#!/usr/bin/env python3
"""
Test espec√≠fico para verificar la funcionalidad de edici√≥n en el ejecutable
"""

import sqlite3
import subprocess
import time
from pathlib import Path

def test_edit_data_preparation():
    """Prepara datos espec√≠ficos para probar la edici√≥n"""
    print("üîß PREPARANDO DATOS ESPEC√çFICOS PARA TEST DE EDICI√ìN")
    print("="*55)
    
    db_file = Path.cwd() / 'nc_ac_faben.db'
    
    try:
        conn = sqlite3.connect(db_file)
        cur = conn.cursor()
        
        # Verificar/crear registro espec√≠fico para testing de edici√≥n
        test_nc = 3000
        cur.execute("SELECT COUNT(*) FROM nc WHERE nro_nc=?", (test_nc,))
        
        if cur.fetchone()[0] == 0:
            # Crear registro con datos espec√≠ficos y reconocibles
            cur.execute('''INSERT INTO nc 
                          (nro_nc, fecha, resultado_matriz, op, cant_invol, cod_producto, 
                           desc_producto, cliente, cant_scrap, costo, cant_recuperada, 
                           observaciones, falla, ishikawa) 
                          VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                       (test_nc, '2025-09-24 17:20:00', 9.8, 77777, 888.0, 'EDIT-TEST', 
                        'PRODUCTO PARA EDICION TEST', 'CLIENTE EDICION S.A.', 77.0, 7777.0, 811.0,
                        'Observaciones espec√≠ficas para test de edici√≥n', 
                        'FALLA PARA TEST DE EDICION', 
                        'Ishikawa espec√≠fico para testing'))
            conn.commit()
            print(f"‚úÖ Registro de prueba NC {test_nc} creado")
        else:
            print(f"‚úÖ Registro de prueba NC {test_nc} ya existe")
        
        # Mostrar los datos que se deber√≠an cargar
        cur.execute("SELECT * FROM nc WHERE nro_nc=?", (test_nc,))
        row = cur.fetchone()
        
        print(f"\nüìã DATOS QUE SE DEBEN CARGAR AL EDITAR NC {test_nc}:")
        print(f"   ‚Ä¢ Resultado Matriz: {row[3]}")
        print(f"   ‚Ä¢ OP: {row[4]}")  
        print(f"   ‚Ä¢ Cant. Invol.: {row[5]}")
        print(f"   ‚Ä¢ Cod. Producto: {row[6]}")
        print(f"   ‚Ä¢ Desc. Producto: {row[7]}")
        print(f"   ‚Ä¢ Cliente: {row[8]}")
        print(f"   ‚Ä¢ Cant. Scrap: {row[9]}")
        print(f"   ‚Ä¢ Costo: {row[10]}")
        print(f"   ‚Ä¢ Cant. Recuperada: {row[11]}")
        print(f"   ‚Ä¢ Falla: {row[13]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error preparando datos: {e}")
        return False
    finally:
        conn.close()

def launch_executable_for_edit_test():
    """Lanza el ejecutable con instrucciones espec√≠ficas para test de edici√≥n"""
    print("\nüöÄ LANZANDO EJECUTABLE PARA TEST DE EDICI√ìN")
    print("="*50)
    
    exe_path = Path.cwd() / 'dist' / 'NC_AC_Registrador_Faben.exe'
    
    if not exe_path.exists():
        print("‚ùå Ejecutable no encontrado")
        return False
    
    print("üß™ INSTRUCCIONES ESPEC√çFICAS PARA TEST DE EDICI√ìN:")
    print("-"*50)
    print("1Ô∏è‚É£ Esperar a que la aplicaci√≥n cargue completamente")
    print("2Ô∏è‚É£ Presionar bot√≥n 'Editar Registro Existente'")
    print("3Ô∏è‚É£ Ingresar el n√∫mero: 3000")
    print("4Ô∏è‚É£ VERIFICAR que los campos se llenen con estos valores:")
    print("    ‚Ä¢ Resultado Matriz: 9.8")
    print("    ‚Ä¢ OP: 77777")
    print("    ‚Ä¢ Cant. Invol.: 888.0")
    print("    ‚Ä¢ Cod. Producto: EDIT-TEST")
    print("    ‚Ä¢ Desc. Producto: PRODUCTO PARA EDICION TEST")
    print("    ‚Ä¢ Cliente: CLIENTE EDICION S.A.")
    print("    ‚Ä¢ Cant. Scrap: 77.0")
    print("    ‚Ä¢ Costo: 7777.0")
    print("    ‚Ä¢ Cant. Recuperada: 811.0")
    print("    ‚Ä¢ Falla: FALLA PARA TEST DE EDICION")
    print("5Ô∏è‚É£ Modificar algunos valores (ej: cambiar OP a 88888)")
    print("6Ô∏è‚É£ Presionar 'Guardar' para confirmar que funciona")
    print("7Ô∏è‚É£ Cerrar la aplicaci√≥n")
    print()
    print("‚ö†Ô∏è  IMPORTANTE: Si los valores NO coinciden, la edici√≥n tiene problemas")
    print("‚úÖ Si los valores coinciden exactamente, la edici√≥n funciona perfecto")
    
    print(f"\nüöÄ Lanzando aplicaci√≥n...")
    
    try:
        # Lanzar el ejecutable
        subprocess.run([str(exe_path)], cwd=exe_path.parent)
        print("\n‚úÖ Aplicaci√≥n cerrada")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error lanzando aplicaci√≥n: {e}")
        return False

def verify_edit_results():
    """Verifica si la edici√≥n se realiz√≥ correctamente"""
    print("\nüîç VERIFICANDO RESULTADOS DE LA EDICI√ìN")
    print("="*45)
    
    db_file = Path.cwd() / 'nc_ac_faben.db'
    
    try:
        conn = sqlite3.connect(db_file)
        cur = conn.cursor()
        
        # Obtener datos actuales del registro NC 3000
        cur.execute("SELECT * FROM nc WHERE nro_nc=?", (3000,))
        row = cur.fetchone()
        
        if not row:
            print("‚ùå Registro NC 3000 no encontrado")
            return False
        
        print("üìä ESTADO ACTUAL DEL REGISTRO NC 3000:")
        print(f"   ‚Ä¢ Resultado Matriz: {row[3]}")
        print(f"   ‚Ä¢ OP: {row[4]}")
        print(f"   ‚Ä¢ Cant. Invol.: {row[5]}")
        print(f"   ‚Ä¢ Cod. Producto: {row[6]}")
        print(f"   ‚Ä¢ Desc. Producto: {row[7]}")
        print(f"   ‚Ä¢ Cliente: {row[8]}")
        print(f"   ‚Ä¢ Cant. Scrap: {row[9]}")
        print(f"   ‚Ä¢ Costo: {row[10]}")
        print(f"   ‚Ä¢ Cant. Recuperada: {row[11]}")
        print(f"   ‚Ä¢ Falla: {row[13]}")
        
        # Verificar si se realizaron cambios
        original_op = 77777
        current_op = row[4]
        
        if current_op != original_op:
            print(f"\n‚úÖ CAMBIO DETECTADO: OP cambi√≥ de {original_op} a {current_op}")
            print("üéâ ¬°LA FUNCIONALIDAD DE EDICI√ìN FUNCION√ì CORRECTAMENTE!")
            return True
        else:
            print(f"\n ‚ÑπÔ∏è  No se detectaron cambios (OP sigue siendo {current_op})")
            print("ü§î Esto puede significar que no se realiz√≥ la prueba o no se guard√≥")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando resultados: {e}")
        return False
    finally:
        conn.close()

def run_complete_edit_test():
    """Ejecuta el test completo de funcionalidad de edici√≥n"""
    print("üß™ TEST COMPLETO DE FUNCIONALIDAD DE EDICI√ìN EN EJECUTABLE")
    print("="*65)
    print(f"Fecha: {time.strftime('%d/%m/%Y %H:%M:%S')}")
    
    # Paso 1: Preparar datos
    if not test_edit_data_preparation():
        print("‚ùå Error en preparaci√≥n de datos")
        return False
    
    # Paso 2: Instrucciones y lanzamiento
    print(f"\n‚è∞ El ejecutable se lanzar√° en 5 segundos...")
    print("üìù Siga las instrucciones que se mostraron arriba")
    time.sleep(5)
    
    if not launch_executable_for_edit_test():
        print("‚ùå Error lanzando ejecutable")
        return False
    
    # Paso 3: Verificar resultados
    time.sleep(1)  # Breve pausa
    edit_worked = verify_edit_results()
    
    # Resumen final
    print(f"\n{'='*65}")
    print("üìã RESUMEN DEL TEST DE EDICI√ìN")
    print('='*65)
    
    if edit_worked:
        print("üéâ ‚úÖ FUNCIONALIDAD DE EDICI√ìN VERIFICADA EXITOSAMENTE")
        print("     ‚Ä¢ Los datos se cargaron correctamente")
        print("     ‚Ä¢ Los cambios se guardaron correctamente")
        print("     ‚Ä¢ El ejecutable funciona igual que el modo desarrollo")
    else:
        print("ü§î ‚ùì NO SE PUDO CONFIRMAR LA FUNCIONALIDAD DE EDICI√ìN")
        print("     ‚Ä¢ Verifique que sigui√≥ todos los pasos")
        print("     ‚Ä¢ Asegurese de haber modificado alg√∫n campo")
        print("     ‚Ä¢ Confirme que presion√≥ 'Guardar'")
    
    print(f"\nüìö Para m√°s detalles revise los logs en log/nc_ac_faben.log")
    
    return edit_worked

if __name__ == "__main__":
    success = run_complete_edit_test()
    
    if success:
        print(f"\nüéØ CONCLUSI√ìN FINAL:")
        print("‚úÖ El ejecutable mantiene TODAS las funcionalidades del modo desarrollo")
        print("‚úÖ La edici√≥n de registros funciona correctamente")  
        print("‚úÖ EJECUTABLE APROBADO PARA DISTRIBUCI√ìN")
    else:
        print(f"\nüîß Se requiere verificaci√≥n manual adicional")