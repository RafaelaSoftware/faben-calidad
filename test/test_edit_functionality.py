#!/usr/bin/env python3
"""
Script de prueba para verificar la funcionalidad de edici√≥n de registros
"""

import sqlite3
import sys
from pathlib import Path

def test_edit_functionality():
    """Prueba la funcionalidad de edici√≥n de registros"""
    
    DB_FILE = Path.cwd() / 'nc_ac_faben.db'
    
    if not DB_FILE.exists():
        print("‚ùå Error: Base de datos no encontrada")
        return False
    
    try:
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        
        # Verificar si hay registros
        cur.execute("SELECT COUNT(*) FROM nc")
        count = cur.fetchone()[0]
        
        if count == 0:
            print("‚ö†Ô∏è  La base de datos est√° vac√≠a. Agregando registro de prueba...")
            
            # Insertar registro de prueba
            cur.execute('''INSERT INTO nc 
                          (nro_nc, fecha, resultado_matriz, op, cant_invol, cod_producto, 
                           desc_producto, cliente, cant_scrap, costo, cant_recuperada, 
                           observaciones, falla, ishikawa) 
                          VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                       (9999, '2024-12-24', 5.0, 12345, 100.0, 'TEST001', 
                        'Producto de Prueba', 'Cliente Test', 10.0, 500.0, 90.0,
                        'Registro de prueba para testing', 'Falla de prueba', 'Ishikawa test'))
            conn.commit()
            print("‚úÖ Registro de prueba agregado (NC 9999)")
        
        # Listar algunos registros disponibles
        print("\nüìã Registros disponibles para prueba:")
        cur.execute("SELECT nro_nc, desc_producto, cliente FROM nc LIMIT 5")
        registros = cur.fetchall()
        
        for nro_nc, desc, cliente in registros:
            print(f"   ‚Ä¢ NC {nro_nc}: {desc} - {cliente}")
        
        # Probar b√∫squeda de registro espec√≠fico
        test_nc = registros[0][0] if registros else 9999
        
        print(f"\nüîç Probando b√∫squeda de NC {test_nc}:")
        cur.execute("SELECT * FROM nc WHERE nro_nc=?", (test_nc,))
        row = cur.fetchone()
        
        if row:
            print("‚úÖ Registro encontrado exitosamente")
            print("üìä Estructura de datos:")
            
            # Mapeo de √≠ndices a nombres de campos
            field_names = ['id', 'nro_nc', 'fecha', 'resultado_matriz', 'op', 'cant_invol', 
                          'cod_producto', 'desc_producto', 'cliente', 'cant_scrap', 'costo', 
                          'cant_recuperada', 'observaciones', 'falla', 'ishikawa']
            
            for i, (field_name, value) in enumerate(zip(field_names, row)):
                print(f"   [{i}] {field_name}: {value}")
            
            # Simular el mapeo que hace el c√≥digo
            print("\nüîß Simulando mapeo de campos para edici√≥n:")
            enable_chain_order = ['Nro NC','Resultado Matriz','OP','Cant. Invol.','Cod. Producto',
                                 'Desc. Producto','Cliente','Cant. Scrap','Costo','Cant. Recuperada','Falla']
            
            # El c√≥digo hace: for idx, name in enumerate(self.enable_chain_order[1:], 1):
            # Y luego: w.setText(str(row[idx+2]))
            
            print("   Campos que se cargar√≠an:")
            for idx, name in enumerate(enable_chain_order[1:], 1):  # Empieza en 1, salta 'Nro NC'
                db_index = idx + 1  # El c√≥digo actual usa idx+2, pero deber√≠a ser idx+1
                if db_index < len(row):
                    print(f"   ‚Ä¢ {name}: row[{db_index}] = {row[db_index]}")
                else:
                    print(f"   ‚ùå {name}: √çNDICE FUERA DE RANGO (row[{db_index}])")
            
            return True
        else:
            print("‚ùå No se encontr√≥ el registro")
            return False
            
    except Exception as e:
        print(f"‚ùå Error durante la prueba: {e}")
        return False
    finally:
        conn.close()

def fix_edit_mapping():
    """Analiza el problema de mapeo en la funci√≥n de edici√≥n"""
    print("\nüîß AN√ÅLISIS DEL PROBLEMA DE EDICI√ìN:")
    print("\nüìã Estructura de tabla NC:")
    print("   [0] id (PK)")
    print("   [1] nro_nc")
    print("   [2] fecha") 
    print("   [3] resultado_matriz")
    print("   [4] op")
    print("   [5] cant_invol")
    print("   [6] cod_producto")
    print("   [7] desc_producto")
    print("   [8] cliente")
    print("   [9] cant_scrap")
    print("   [10] costo")
    print("   [11] cant_recuperada")
    print("   [12] observaciones")
    print("   [13] falla")
    print("   [14] ishikawa")
    
    print("\nüìã Orden de campos en enable_chain_order:")
    enable_chain_order = ['Nro NC','Resultado Matriz','OP','Cant. Invol.','Cod. Producto',
                         'Desc. Producto','Cliente','Cant. Scrap','Costo','Cant. Recuperada','Falla']
    
    for i, field in enumerate(enable_chain_order):
        print(f"   [{i}] {field}")
    
    print("\nüîß Mapeo CORRECTO que deber√≠a usarse:")
    print("   Campo en UI -> √çndice DB correcto")
    
    # Mapeo correcto: enable_chain_order[1:] corresponde a row[2:]
    db_mapping = {
        'Resultado Matriz': 3,  # resultado_matriz  
        'OP': 4,               # op
        'Cant. Invol.': 5,     # cant_invol
        'Cod. Producto': 6,    # cod_producto
        'Desc. Producto': 7,   # desc_producto
        'Cliente': 8,          # cliente
        'Cant. Scrap': 9,      # cant_scrap
        'Costo': 10,           # costo
        'Cant. Recuperada': 11, # cant_recuperada
        'Falla': 13            # falla (salta observaciones e ishikawa)
    }
    
    for idx, name in enumerate(enable_chain_order[1:], 0):  # idx empieza en 0
        correct_db_idx = db_mapping.get(name, "NO MAPEADO")
        current_wrong_idx = idx + 3  # Lo que hace el c√≥digo actual (idx+2 pero idx empieza en 1)
        should_be_idx = idx + 3 if idx < 9 else (13 if idx == 9 else "PROBLEMA")
        
        print(f"   ‚Ä¢ {name}:")
        print(f"     - C√≥digo actual: row[{current_wrong_idx}] ‚ùå")  
        print(f"     - Deber√≠a ser: row[{correct_db_idx}] ‚úÖ")
    
    print(f"\n‚ö†Ô∏è  PROBLEMA IDENTIFICADO:")
    print(f"   ‚Ä¢ El c√≥digo actual usa 'row[idx+2]' donde idx empieza en 1")
    print(f"   ‚Ä¢ Esto genera √≠ndices incorrectos")  
    print(f"   ‚Ä¢ Soluci√≥n: Usar mapeo directo por nombre de campo")

if __name__ == "__main__":
    print("üß™ PRUEBA DE FUNCIONALIDAD DE EDICI√ìN DE REGISTROS\n")
    
    # Probar funcionalidad b√°sica
    success = test_edit_functionality()
    
    # Analizar el problema de mapeo
    fix_edit_mapping()
    
    if success:
        print("\n‚úÖ La funcionalidad b√°sica de b√∫squeda funciona")
        print("‚ö†Ô∏è  Sin embargo, hay un problema en el mapeo de campos")
        print("üìù Se requiere correcci√≥n en las funciones edit_record() y edit_record_by_number()")
    else:
        print("\n‚ùå Hay problemas con la funcionalidad b√°sica")
    
    print("\n" + "="*60)
    print("RECOMENDACIONES:")
    print("1. Corregir el mapeo de √≠ndices en funciones de edici√≥n")  
    print("2. Usar mapeo directo por nombre de campo en lugar de √≠ndices")
    print("3. Agregar manejo de campos faltantes (observaciones, ishikawa)")
    print("4. Probar con registros reales despu√©s de las correcciones")