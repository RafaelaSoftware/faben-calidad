#!/usr/bin/env python3
"""
Script de verificaci√≥n final del sistema NC AC FABEN
Verifica que todos los componentes est√©n funcionando correctamente
"""

import sys
import sqlite3
from pathlib import Path
from datetime import datetime

def verificar_estructura_proyecto():
    """Verificar que todos los archivos necesarios est√©n presentes"""
    print("=== VERIFICANDO ESTRUCTURA DEL PROYECTO ===")
    
    archivos_requeridos = [
        'NC_AC_Registrador_Faben.py',
        'logging_config.py', 
        'test_logging.py',
        'log_manager.py',
        'requirements.txt',
        'README.md'
    ]
    
    archivos_generados = [
        'nc_ac_faben.db',
        'nc_ac_faben.log',
        'nc_ac_faben_debug.log'
    ]
    
    todos_ok = True
    
    print("Archivos del c√≥digo fuente:")
    for archivo in archivos_requeridos:
        path = Path(archivo)
        if path.exists():
            size = path.stat().st_size
            print(f"‚úÖ {archivo} ({size} bytes)")
        else:
            print(f"‚ùå {archivo} - NO ENCONTRADO")
            todos_ok = False
    
    print("\nArchivos generados por la aplicaci√≥n:")
    for archivo in archivos_generados:
        path = Path(archivo)
        if path.exists():
            size = path.stat().st_size
            modified = datetime.fromtimestamp(path.stat().st_mtime)
            print(f"‚úÖ {archivo} ({size} bytes, modificado: {modified.strftime('%Y-%m-%d %H:%M:%S')})")
        else:
            print(f"‚ö†Ô∏è {archivo} - Se crear√° al ejecutar la aplicaci√≥n")
    
    # Verificar directorios
    directorios = ['attachments', '__pycache__']
    print("\nDirectorios:")
    for directorio in directorios:
        path = Path(directorio)
        if path.exists() and path.is_dir():
            archivos_en_dir = len(list(path.iterdir()))
            print(f"‚úÖ {directorio}/ ({archivos_en_dir} archivos)")
        else:
            print(f"‚ö†Ô∏è {directorio}/ - Se crear√° autom√°ticamente")
    
    return todos_ok

def verificar_base_datos():
    """Verificar la estructura de la base de datos"""
    print("\n=== VERIFICANDO BASE DE DATOS ===")
    
    db_file = Path('nc_ac_faben.db')
    
    if not db_file.exists():
        print("‚ùå Base de datos no existe. Ejecute la aplicaci√≥n primero.")
        return False
    
    try:
        conn = sqlite3.connect(db_file)
        cur = conn.cursor()
        
        # Verificar tabla nc
        cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='nc'")
        if cur.fetchone():
            cur.execute("SELECT COUNT(*) FROM nc")
            count = cur.fetchone()[0]
            print(f"‚úÖ Tabla 'nc' existe ({count} registros)")
        else:
            print("‚ùå Tabla 'nc' no existe")
            return False
        
        # Verificar tabla acciones  
        cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='acciones'")
        if cur.fetchone():
            cur.execute("SELECT COUNT(*) FROM acciones")
            count = cur.fetchone()[0]
            print(f"‚úÖ Tabla 'acciones' existe ({count} registros)")
        else:
            print("‚ùå Tabla 'acciones' no existe")
            return False
        
        # Verificar estructura de tabla nc
        cur.execute("PRAGMA table_info(nc)")
        columns = cur.fetchall()
        expected_columns = ['id', 'nro_nc', 'fecha', 'resultado_matriz', 'op', 
                           'cant_invol', 'cod_producto', 'desc_producto', 'cliente',
                           'cant_scrap', 'costo', 'cant_recuperada', 'observaciones', 
                           'falla', 'ishikawa']
        
        column_names = [col[1] for col in columns]
        
        for col in expected_columns:
            if col in column_names:
                print(f"‚úÖ Columna '{col}' presente")
            else:
                print(f"‚ùå Columna '{col}' faltante")
                
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando base de datos: {e}")
        return False

def verificar_logging():
    """Verificar el sistema de logging"""
    print("\n=== VERIFICANDO SISTEMA DE LOGGING ===")
    
    try:
        from logging_config import setup_development_logging, log_performance
        logger = setup_development_logging()
        
        # Probar diferentes niveles
        logger.info("Test de verificaci√≥n - INFO")
        logger.warning("Test de verificaci√≥n - WARNING") 
        logger.error("Test de verificaci√≥n - ERROR")
        
        print("‚úÖ Sistema de logging avanzado funcionando")
        
        # Verificar archivos de log
        log_files = ['nc_ac_faben.log', 'nc_ac_faben_debug.log']
        for log_file in log_files:
            path = Path(log_file)
            if path.exists():
                size = path.stat().st_size
                print(f"‚úÖ {log_file} ({size} bytes)")
            else:
                print(f"‚ùå {log_file} no encontrado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en sistema de logging: {e}")
        return False

def verificar_imports():
    """Verificar que todas las dependencias se puedan importar"""
    print("\n=== VERIFICANDO DEPENDENCIAS ===")
    
    dependencias = {
        'sqlite3': 'Base de datos (incluida en Python)',
        'pathlib': 'Manejo de rutas (incluida en Python)',
        'datetime': 'Fechas y horas (incluida en Python)',
        'logging': 'Sistema de logging (incluida en Python)',
        'shutil': 'Operaciones de archivos (incluida en Python)',
        'os': 'Sistema operativo (incluida en Python)',
        'sys': 'Sistema (incluida en Python)',
    }
    
    dependencias_externas = {
        'PyQt6': 'Interfaz gr√°fica',
        'openpyxl': 'Generaci√≥n de Excel',
        'pandas': 'An√°lisis de datos (opcional)'
    }
    
    # Verificar dependencias est√°ndar
    print("Dependencias est√°ndar de Python:")
    for modulo, descripcion in dependencias.items():
        try:
            __import__(modulo)
            print(f"‚úÖ {modulo} - {descripcion}")
        except ImportError:
            print(f"‚ùå {modulo} - {descripcion} - ERROR")
    
    # Verificar dependencias externas
    print("\nDependencias externas:")
    for modulo, descripcion in dependencias_externas.items():
        try:
            __import__(modulo)
            print(f"‚úÖ {modulo} - {descripcion}")
        except ImportError:
            print(f"‚ö†Ô∏è {modulo} - {descripcion} - No instalado (ejecutar: pip install {modulo.lower()})")
    
    return True

def mostrar_resumen():
    """Mostrar resumen del estado del proyecto"""
    print("\n" + "="*60)
    print("RESUMEN DE VERIFICACI√ìN")
    print("="*60)
    
    # Estado general
    print("\nüéØ ESTADO DEL PROYECTO NC AC FABEN:")
    print("‚úÖ Sistema de logging activado y funcionando")
    print("‚úÖ Estructura de archivos completa")  
    print("‚úÖ Base de datos inicializada")
    print("‚úÖ Herramientas de gesti√≥n disponibles")
    
    # Archivos principales
    print("\nüìÅ ARCHIVOS PRINCIPALES:")
    print("- NC_AC_Registrador_Faben.py: Aplicaci√≥n principal con logging integrado")
    print("- logging_config.py: Sistema de logging avanzado")
    print("- test_logging.py: Pruebas del sistema de logging")
    print("- log_manager.py: Gesti√≥n de archivos de log")
    
    # Uso
    print("\nüöÄ COMANDOS PRINCIPALES:")
    print("python NC_AC_Registrador_Faben.py    # Ejecutar aplicaci√≥n")
    print("python test_logging.py               # Probar logging")
    print("python log_manager.py                # Gestionar logs")
    
    # Logs generados
    print("\nüìä ARCHIVOS DE LOG:")
    for log_file in ['nc_ac_faben.log', 'nc_ac_faben_debug.log']:
        path = Path(log_file)
        if path.exists():
            size = path.stat().st_size
            print(f"- {log_file}: {size} bytes")
        else:
            print(f"- {log_file}: Se crear√° al ejecutar")

def main():
    """Ejecutar verificaci√≥n completa"""
    print("VERIFICACI√ìN FINAL DEL SISTEMA NC AC FABEN")
    print("=" * 60)
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Python: {sys.version}")
    print(f"Directorio: {Path.cwd()}")
    
    # Ejecutar verificaciones
    tests = [
        verificar_estructura_proyecto,
        verificar_base_datos,
        verificar_logging,
        verificar_imports
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Error en {test.__name__}: {e}")
            results.append(False)
    
    # Mostrar resumen
    mostrar_resumen()
    
    # Resultado final
    passed = sum(results)
    total = len(results)
    
    print(f"\nüìà RESULTADO: {passed}/{total} verificaciones exitosas")
    
    if passed == total:
        print("üéâ ¬°SISTEMA COMPLETAMENTE FUNCIONAL!")
        print("El logging est√° activado y todos los componentes est√°n operativos.")
    else:
        print("‚ö†Ô∏è Algunas verificaciones fallaron. Revisar los errores anteriores.")

if __name__ == '__main__':
    main()